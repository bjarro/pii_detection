Array A

Filter operation -> Boolean Mask

Subset of Array A - from boolean mask

Question:
 - Perform operations with the subset
    - First calculate mappings of the smaller list to Original position in Array A
    - perform with the smaller subset
    - Map the smaller subset back to array A

 - or still perform operations with the whole array A
    - Only apply the changes on the filtered elements by using the mask generated by the filter operation
    


I have an Array A and I want to perform operations on the subset of the elements in it and save the changes to the original array. I will perform a filter operation to get a boolean mask of mapping the subset of the elements I am interest in. Consider that these operations will be done in numpy arrays or tensors. My question is, which of the following approaches is better?

1. Perform operations on a smaller subset of array A?
- this involves getting a smaller subarray B from array A, performing operations with it and then mapping it back to the original array.

2. Perform operations on the whole array A?
- this involves performing operations with the whole array A but only saving the changes at the end using the boolean mask.

3. A better solution that you can suggest


Running time of running np.where(mask, arr_True, arr_False) vs arr_True[condition] = arr_False
